@page "/Orders"
@using Entities
@using Client.Data.RestaurantService
@using Client.Data.OrderService
@using Client.Components
@using System.Text.Json
@inject IRestaurantService restaurantService;
@inject IOrderServiceT1 orderService;
@inject IJSRuntime jsRuntime;


<a data-toggle="collapse">
    <div class="div-category">
        <div class="row" style="padding-left: 20px" xmlns="http://www.w3.org/1999/html">
            <div class="column" style="padding-right: 20px">
                
            </div>

            <div class="column">
                <a>
                    <h5>Incoming orders</h5>
                </a>
            </div>
        </div>
    </div>
</a>

<div style="padding-top: 20px">
    
    @foreach (Order order in incomingOrders)
    {
        <OrderComponent Order="@order"></OrderComponent>
    }
</div>


<a data-toggle="collapse">
    <div class="div-category">
        <div class="row" style="padding-left: 20px" xmlns="http://www.w3.org/1999/html">
            <div class="column" style="padding-right: 20px">
                
            </div>

            <div class="column">
                <a>
                    <h5>Accepted orders</h5>
                </a>
            </div>
        </div>
    </div>
</a>

@code{
    //[Parameter]
    //public string username { get; set; }

    private Restaurant restaurant = new Restaurant();

    //private Restaurant restaurant =  new Restaurant()
    //{
    //    DeliveryOption1 = new Delivery(),
    //    DeliveryOption2 = new Delivery(),
    //};

    private IList<Order> incomingOrders = new List<Order>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReadRestaurant();
            //restaurant = await restaurantService.GetRestaurantAsync(username);
            incomingOrders = await orderService.GetIncomingOrdersAsync(restaurant.Username);
        }
        catch (Exception e)
        {
    // update some error label here, or show popup..
        }
    }
    
    public async Task ReadRestaurant()
    {
        string restaurantAsJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentRestaurant");

        if (!string.IsNullOrEmpty(restaurantAsJson))
        {
            restaurant = JsonSerializer.Deserialize<Restaurant>(restaurantAsJson);
        }
    }
}
