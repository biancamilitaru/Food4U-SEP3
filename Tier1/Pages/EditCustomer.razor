@page "/EditCustomer"

@using Entities
@using Microsoft.AspNetCore.Components
@using Client.Data.CustomerService
@using System.Text.Json
@using Client.Authentication
@inject ICustomerServiceT1 customerService;
@inject IJSRuntime jsRuntime;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<div style="padding-bottom: 10px; position: sticky; z-index: 2; top: 56px; background-color: white">
  <h3>Edit my customer profile</h3>
</div>

<EditForm Model="@customer" OnValidSubmit="@Edit">
  <DataAnnotationsValidator/>
  <ValidationSummary/>
  <div class="card" style="margin-bottom: 20px">
    <div class="card-body">
      <h4>Login information:</h4>
      <div class="form-group">
        <label>Username:</label>
        <InputText placeholder="Create a username for login" style="max-width: 50%" class="form-control" @bind-Value="customer.Username"/>
      </div>
      <div class="form-group">
        <label>Password:</label>
        <InputText type="password" placeholder="Create a password that you will use" style="max-width: 50%" class="form-control" @bind-Value="customer.Password"/>
      </div>
    </div>
  </div>
  
  <div class="card" style="margin-bottom: 20px">
    <div class="card-body">
      <h4>Customers's information:</h4>
      
      <div class="form-group">
        <label>First name:</label>
        <InputText placeholder="Enter your first name" style="max-width: 50%" class="form-control" @bind-Value="customer.FirstName"/>
      </div>
      
      <div class="form-group">
        <label>Last name:</label>
        <InputText placeholder="Enter your last name" style="max-width: 50%" class="form-control" @bind-Value="customer.LastName"/>
      </div>
    </div>
  </div>
  
  <div class="card" style="margin-bottom: 20px">
    <div class="card-body">
      <h4>Contact information:</h4>
        
      <div class="form-group">
        <label>Email address:</label>
        <InputText placeholder="Enter email" style="max-width: 50%" class="form-control" @bind-Value="customer.Email"/>
      </div>
        
      <div class="form-group">
        <label>Phone number</label>
        <InputText placeholder="Enter phone number" style="max-width: 50%" class="form-control" @bind-Value="customer.PhoneNumber"/>
      </div>
      
      <div class="form-group">
        <label>Address</label>
        <InputText placeholder="Enter address" style="max-width: 50%" class="form-control" @bind-Value="customer.Address"/>
      </div>
    </div>
  </div>
  <div style="padding: 20px">
    <div class="row">
      <div class="column" style="padding-right: 20px">
        <a @onclick="DeleteProfile" class="actions"><button class="btn btn-secondary">Delete my profile</button></a>
      </div>
      <div class="column" style="padding-right: 20px">
        <p class="actions"><button class="btn btn-success" type="submit">Edit my profile</button></p>
      </div>
    </div>
  </div>


</EditForm>


@code {
  private Customer customer = new ();
  
  [Inject]
  public NavigationManager NavigationManager { get; set; }

  protected override async Task OnInitializedAsync()
  {
    try
    {
      await ReadCustomer();
    }
    catch (Exception e)
    {
  // update some error label here, or show popup..
    }
  }
  
  public async Task ReadCustomer()
  {
    string customerAsJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentCustomer");

    if (!string.IsNullOrEmpty(customerAsJson))
    {
      customer = JsonSerializer.Deserialize<Customer>(customerAsJson);
    }
  }
  
  private void Edit()
  {
    customerService.UpdateCustomerAsync(customer);
  }
  
  private async void DeleteProfile()
  {
    await customerService.DeleteCustomerAsync(customer.Username);
    await PerformLogout();
    NavigationManager.NavigateTo("/");
  }
  
  private async Task PerformLogout()
  {
    try
    {
      await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      throw;
    }
  }
    
}