@page "/EditRestaurant"
@using Entities
@using Client.Data.RestaurantService
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@inject IRestaurantService restaurantService;
@inject IJSRuntime jsRuntime;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@using Client.Authentication

<div style="padding-bottom: 10px; position: sticky; z-index: 2; top: 56px; background-color: white">
  <h3>Edit my restaurant profile</h3>
</div>

@if(restaurant.Username!=null){
<EditForm Model="@restaurant" OnValidSubmit="@EditExistingRestaurant">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="card" style="margin-bottom: 20px">
      <div class="card-body">
        <h4>Login information:</h4>
        <div class="form-group">
          <label>Username:</label>
          <InputText placeholder="Create a username for login" style="max-width: 50%" class="form-control" @bind-Value="restaurant.Username"/>
        </div>
        <div class="form-group">
          <label>Password:</label>
          <InputText type="password" placeholder="Create a password that will be used" style="max-width: 50%" class="form-control" @bind-Value="restaurant.Password"/>
        </div>
      </div>
    </div>
  
    <div class="card" style="margin-bottom: 20px">
      <div class="card-body">
        <h4>Restaurant's information:</h4>
        <div class="form-group">
          <label>Name of the restaurant:</label>
          <InputText placeholder="Enter a name of the restaurant" style="max-width: 50%" class="form-control" @bind-Value="restaurant.Name"/>
        </div>
    
        <div class="form-group">
          <label>Description:</label>
          <InputText placeholder="Enter a description of the restaurant" style="max-width: 50%" class="form-control" @bind-Value="restaurant.Description"/>
        </div>

        <div class="form-group">
          <label>Address of the restaurant:</label>
          <InputText placeholder="Enter an address of the restaurant" style="max-width: 50%" class="form-control" @bind-Value="restaurant.Address"/>
        </div>
    
        <div class="form-group">
          <label>Phone number:</label>
          <InputText placeholder="Enter a phone number of the restaurant"  style="max-width: 50%" class="form-control" @bind-Value="restaurant.PhoneNumber"/>
        </div>
      </div>
    </div>
    
    <div class="card" style="margin-bottom: 20px">
      <div class="card-body">
        <h4>Opening hours:</h4>
        <div class="form-group">
          <div class="row">
            <div class="column">
              <label style="margin-left: 20px; min-width: 90px">Monday:</label>
            </div>
            <div class="column">
              <InputText placeholder="8:00 - 20:00"  class="form-control" @bind-Value="restaurant.OpeningHoursMonday"></InputText>
            </div>
          </div>
        </div>
        <div class="form-group">
          <div class="row">
            <div class="column">
              <label style="margin-left: 20px; min-width: 90px">Tuesday:</label>
            </div>
            <div class="column">
              <InputText placeholder="8:00 - 20:00"  class="form-control" @bind-Value="restaurant.OpeningHoursTuesday"></InputText>
            </div>
          </div>
        </div>
        <div class="form-group">
          <div class="row">
            <div class="column">
              <label style="margin-left: 20px; min-width: 90px">Wednesday:</label>
            </div>
            <div class="column">
              <InputText placeholder="8:00 - 20:00"  class="form-control" @bind-Value="restaurant.OpeningHoursWednesday"></InputText>
            </div>
          </div>
        </div>
        <div class="form-group">
          <div class="row">
            <div class="column">
              <label style="margin-left: 20px; min-width: 90px">Thursday:</label>
            </div>
            <div class="column">
              <InputText placeholder="8:00 - 20:00"  class="form-control" @bind-Value="restaurant.OpeningHoursThursday"></InputText>
            </div>
          </div>
        </div>
        <div class="form-group">
          <div class="row">
            <div class="column">
              <label style="margin-left: 20px; min-width: 90px">Friday:</label>
            </div>
            <div class="column">
              <InputText placeholder="8:00 - 20:00"  class="form-control" @bind-Value="restaurant.OpeningHoursFriday"></InputText>
            </div>
          </div>
        </div>
        <div class="form-group">
          <div class="row">
            <div class="column">
              <label style="margin-left: 20px; min-width: 90px">Saturday:</label>
            </div>
            <div class="column">
              <InputText placeholder="8:00 - 20:00"  class="form-control" @bind-Value="restaurant.OpeningHoursSaturday"></InputText>
            </div>
          </div>
        </div>
        <div class="form-group">
          <div class="row">
            <div class="column">
              <label style="margin-left: 20px; min-width: 90px">Sunday:</label>
            </div>
            <div class="column">
              <InputText placeholder="8:00 - 20:00"  class="form-control" @bind-Value="restaurant.OpeningHoursSunday"></InputText>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    
    <div class="card" style="margin-bottom: 20px">
      <div class="card-body">
        <h4>Delivery options:</h4>
        <div class="row">
          <div class="column" style="padding: 20px">
            <div class="card">
              <div class="card-body">
                <h6>Delivery option 1</h6>
                <InputText placeholder="Delivery name" class="form-control" @bind-Value="restaurant.DeliveryOption1.DeliveryName"/>
                <InputNumber class="form-control" @bind-Value="restaurant.DeliveryOption1.Price"/>
              </div>
            </div>
          </div>
          <div class="column" style="padding: 20px">
            <div class="card">
              <div class="card-body">
                <h6>Delivery option 2</h6>
                <InputText placeholder="Delivery name" class="form-control" @bind-Value="restaurant.DeliveryOption2.DeliveryName"/>
                <InputNumber class="form-control" @bind-Value="restaurant.DeliveryOption2.Price"/>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="column">
      <div class="card">
        @if (restaurant.Visibility)
            {
              <div style="padding: 20px">
                <p>My profile is visible to other users.</p>
                <a style="padding-top: 10px" @onclick="OnPrivate" class="actions"><button class="btn btn-primary btn-sm">Change to private</button></a>
              </div>
            }
            
            @if (!restaurant.Visibility)
            {
              <div style="padding: 20px">
                <p>My profile is private. Other users cannot see it.</p>
                <a style="padding-top: 10px" @onclick="OnPublic" class="actions"><button class="btn btn-primary btn-sm">Change to public</button></a>
              </div>
            }
      </div>
    </div>
    
    <div style="padding: 20px">
      <div class="row">
        <div class="column" style="padding-right: 20px">
          <a @onclick="DeleteProfile" class="actions"><button class="btn btn-secondary">Delete restaurant</button></a>
        </div>
        <div class="column" style="padding-right: 20px">
          <p class="actions"><button class="btn btn-success" type="submit">Edit restaurant</button></p>
        </div>
      </div>
    </div>
</EditForm>
}


@code {
  private Restaurant restaurant = new();
  private Boolean visible = true;
  private Boolean non_visible = false;
  
  [Inject]
  public NavigationManager NavigationManager { get; set; }


  protected override async Task OnInitializedAsync()
  {
    try
    {
      await ReadRestaurant();
    }
    catch (Exception e)
    {
  // update some error label here, or show popup
    }
  }
  public async Task ReadRestaurant()
    {
        string restaurantAsJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentRestaurant");

        if (!string.IsNullOrEmpty(restaurantAsJson))
        {
            restaurant = JsonSerializer.Deserialize<Restaurant>(restaurantAsJson);
        }
    }
    
    private async void EditExistingRestaurant()
    {
      await restaurantService.UpdateRestaurantAsync(restaurant);
      NavigationManager.NavigateTo("/");
    }
    
    private async void DeleteProfile()
    {
      await restaurantService.DeleteRestaurantAsync(restaurant.Username);
      await PerformLogout();
      NavigationManager.NavigateTo("/");
    }

  private void OnPrivate()
  {
    restaurant.Visibility = false;
  }
  private void OnPublic()
  {
    restaurant.Visibility = true;
  }
  
  private async Task PerformLogout()
  {
    try
    {
      await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      throw;
    }
  }
}