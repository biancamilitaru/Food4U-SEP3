@using Entities
@using System.Text.Json
@inject IJSRuntime jsRuntime;

<div class="modal fade" id="ShoppingCart" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Shopping cart</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                
                @if (ShoppingCartList != null)
                {
                    foreach (Item item in ShoppingCartList)
                    {
                        <!-- Card with item -->
                        <div class="row">
                            <div class="column" style="width: 80%">
                                <div style="margin: 15px;">
                                    <h6>@item.Name</h6>
                                    <small>@item.Description</small>
                                </div>
                            </div>
                            <div class="column" style="width: 20%">
                                <label>@item.Price</label>
                                <p class="actions"><button class="btn btn-success btn-sm">Delete</button></p>
                            </div>
                        </div>
                        <hr>
                        <!-- Card with item -->
                    }
                    
                    //Comment section
                    <textarea class="form-control"  rows="3" placeholder="Any comment or wishes?"></textarea>
                    
                    //Delivery options
                    //TODO Implement the method that will find the restaurant based on item and display restaurants delivery options
                    <a data-toggle="collapse" data-target="#collapseDeliveryOption"><h6 style="padding-top: 20px">Delivery options</h6></a>
                    
                    <div class="collapse" id="collapseDeliveryOption">
                        <div class="row">
                            <div class="column">
                                <div class="card" style="margin: 20px">
                                    <div class="card-body">
                                        <p>Delivery name</p>
                                        <p>100 dkk</p>
                                        <p class="actions"><button class="btn btn-success btn-sm">Select delivery</button></p>
                                    </div>
                                </div>
                            </div>
                            <div class="column">
                                <div class="card" style="margin: 20px">
                                    <div class="card-body">
                                        <p>Delivery name</p>
                                        <p>100 dkk</p>
                                        <p class="actions"><button class="btn btn-success btn-sm">Select delivery</button></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    


                }
                else
                {
                    <h6>Shopping cart is empty</h6>
                }

            </div>
            <div class="modal-footer">
                <p class="actions"><button class="btn btn-secondary btn-sm" data-dismiss="modal">Cancel</button></p>
                <p class="actions"><button @onclick="onContinue" class="btn btn-primary btn-sm" data-dismiss="modal">Continue</button></p>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public IList<Item> ShoppingCartList { get; set; }
    
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private Customer customer;
    
    public async Task ReadCustomer()
    {
        string customerAsJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentCustomer");
        Console.WriteLine(customerAsJson);
        
        if (!string.IsNullOrEmpty(customerAsJson))
        {
            customer = JsonSerializer.Deserialize<Customer>(customerAsJson);
        }
    }

    private async Task onContinue()
    {
        await ReadCustomer();
        NavigationManager.NavigateTo("Order/"+customer.Username);
    }
    
    
}